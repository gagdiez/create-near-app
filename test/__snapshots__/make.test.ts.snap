// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`make all projects make project files contract 'assemblyscript' frontend 'none' 1`] = `
Array [
  Array [
    "/assemblyscript_none/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/assemblyscript_none/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/assemblyscript_none/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/assemblyscript_none/contract/.gitignore",
    "node_modules
build
package-lock.json
yarn.lock
",
  ],
  Array [
    "/assemblyscript_none/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12


Exploring The Code
==================

1. The main smart contract code lives in \`assembly/index.ts\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`npm run test\` script. This runs
   standard AssemblyScript tests using [as-pect].


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli
",
  ],
  Array [
    "/assemblyscript_none/contract/as-pect.config.js",
    "module.exports = require('near-sdk-as/imports');",
  ],
  Array [
    "/assemblyscript_none/contract/asconfig.json",
    "{
  \\"extends\\": \\"near-sdk-as/asconfig.json\\"
}
",
  ],
  Array [
    "/assemblyscript_none/contract/assembly/__tests__/as-pect.d.ts",
    "/// <reference types=\\"@as-pect/assembly/types/as-pect\\" />",
  ],
  Array [
    "/assemblyscript_none/contract/assembly/__tests__/main.spec.ts",
    "import { set_greeting, get_greeting } from '..';

describe('Greeting ', () => {
  it('should get the default greeting', () => {
    expect(get_greeting()).toBe('Hello');
  });
  it('should change the greeting', () => {
    set_greeting('howdy');
    expect(get_greeting()).toBe('howdy');
  });
});",
  ],
  Array [
    "/assemblyscript_none/contract/assembly/as_types.d.ts",
    "/// <reference types=\\"near-sdk-as/assembly/as_types\\" />",
  ],
  Array [
    "/assemblyscript_none/contract/assembly/index.ts",
    "/*
 * Example smart contract written in AssemblyScript
 *
 * Learn more about writing NEAR smart contracts with AssemblyScript:
 * https://near-docs.io/develop/welcome
 *
 */

import { logging, storage } from 'near-sdk-as';

const DEFAULT_MESSAGE = 'Hello';

// Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
export function get_greeting(): string {
  return storage.getPrimitive<string>('message', DEFAULT_MESSAGE);
}

// Public method - accepts a greeting, such as 'howdy', and records it
export function set_greeting(message: string): void {
  // Use logging.log to record logs permanently to the blockchain!
  logging.log(\`Saving greeting '\${message}'\`);
  storage.set<string>('message', message);
}",
  ],
  Array [
    "/assemblyscript_none/contract/assembly/tsconfig.json",
    "{
  \\"extends\\": \\"assemblyscript/std/assembly.json\\",
  \\"include\\": [
    \\"./**/*.ts\\"
  ]
}
",
  ],
  Array [
    "/assemblyscript_none/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"build\\": \\"asb\\",
    \\"test\\": \\"asp --nologo\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-as\\": \\"^3.2.3\\"
  }
}
",
  ],
  Array [
    "/assemblyscript_none/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/assemblyscript_none/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/assemblyscript_none/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/assemblyscript_none/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/assemblyscript_none/package.json",
    "{
  \\"name\\": \\"assemblyscript_none\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract\\",
    \\"build:contract\\": \\"cd contract && npm run build && cp ./build/release/greeter.wasm ../out/contract.wasm\\",
    \\"test\\": \\"npm run build:contract && npm run test:unit && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && npm run test\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\"
  },
  \\"dependencies\\": {}
}",
  ],
]
`;

exports[`make all projects make project files contract 'assemblyscript' frontend 'react' 1`] = `
Array [
  Array [
    "/assemblyscript_react/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/assemblyscript_react/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/assemblyscript_react/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/assemblyscript_react/contract/.gitignore",
    "node_modules
build
package-lock.json
yarn.lock
",
  ],
  Array [
    "/assemblyscript_react/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12


Exploring The Code
==================

1. The main smart contract code lives in \`assembly/index.ts\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`npm run test\` script. This runs
   standard AssemblyScript tests using [as-pect].


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli
",
  ],
  Array [
    "/assemblyscript_react/contract/as-pect.config.js",
    "module.exports = require('near-sdk-as/imports');",
  ],
  Array [
    "/assemblyscript_react/contract/asconfig.json",
    "{
  \\"extends\\": \\"near-sdk-as/asconfig.json\\"
}
",
  ],
  Array [
    "/assemblyscript_react/contract/assembly/__tests__/as-pect.d.ts",
    "/// <reference types=\\"@as-pect/assembly/types/as-pect\\" />",
  ],
  Array [
    "/assemblyscript_react/contract/assembly/__tests__/main.spec.ts",
    "import { set_greeting, get_greeting } from '..';

describe('Greeting ', () => {
  it('should get the default greeting', () => {
    expect(get_greeting()).toBe('Hello');
  });
  it('should change the greeting', () => {
    set_greeting('howdy');
    expect(get_greeting()).toBe('howdy');
  });
});",
  ],
  Array [
    "/assemblyscript_react/contract/assembly/as_types.d.ts",
    "/// <reference types=\\"near-sdk-as/assembly/as_types\\" />",
  ],
  Array [
    "/assemblyscript_react/contract/assembly/index.ts",
    "/*
 * Example smart contract written in AssemblyScript
 *
 * Learn more about writing NEAR smart contracts with AssemblyScript:
 * https://near-docs.io/develop/welcome
 *
 */

import { logging, storage } from 'near-sdk-as';

const DEFAULT_MESSAGE = 'Hello';

// Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
export function get_greeting(): string {
  return storage.getPrimitive<string>('message', DEFAULT_MESSAGE);
}

// Public method - accepts a greeting, such as 'howdy', and records it
export function set_greeting(message: string): void {
  // Use logging.log to record logs permanently to the blockchain!
  logging.log(\`Saving greeting '\${message}'\`);
  storage.set<string>('message', message);
}",
  ],
  Array [
    "/assemblyscript_react/contract/assembly/tsconfig.json",
    "{
  \\"extends\\": \\"assemblyscript/std/assembly.json\\",
  \\"include\\": [
    \\"./**/*.ts\\"
  ]
}
",
  ],
  Array [
    "/assemblyscript_react/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"build\\": \\"asb\\",
    \\"test\\": \\"asp --nologo\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-as\\": \\"^3.2.3\\"
  }
}
",
  ],
  Array [
    "/assemblyscript_react/frontend/App.js",
    "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { getGreetingFromContract, setGreetingOnContract } from './near-api';
import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App() {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreetingFromContract()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }, []);

  /// If user not signed-in with wallet - show prompt
  if (!window.walletConnection.isSignedIn()) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    setGreetingOnContract(greetingInput.value)
      .then(getGreetingFromContract)
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  return (
    <>
      <SignOutButton accountId={window.accountId}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className=\\"greeting\\">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className='change'>
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete=\\"off\\"
              defaultValue={valueFromBlockchain}
              id=\\"greetingInput\\"
            />
            <button>Save</button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}
",
  ],
  Array [
    "/assemblyscript_react/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/assemblyscript_react/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/assemblyscript_react/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/assemblyscript_react/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/assemblyscript_react/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"assets/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id=\\"root\\"></div>
    <script src=\\"./index.js\\" type=\\"module\\"></script>
  </body>
</html>
",
  ],
  Array [
    "/assemblyscript_react/frontend/index.js",
    "import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import { initContract } from './near-api';

const reactRoot = createRoot(document.querySelector('#root'));

window.nearInitPromise = initContract()
  .then(() => {
    reactRoot.render(<App />);
  })
  .catch(e => {
    reactRoot.render(<div style={{color: 'red'}}>Error: <code>{e.message}</code></div>);
    console.error(e);
  });
",
  ],
  Array [
    "/assemblyscript_react/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { getConfig}  from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message) {
  let response = await window.contract.set_greeting({
    args: { message: message }
  });
  return response;
}

export async function getGreetingFromContract() {
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/assemblyscript_react/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

export function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}
",
  ],
  Array [
    "/assemblyscript_react/frontend/ui-components.js",
    "import { signInWithNearWallet, signOutNearWallet } from './near-api';
import React from 'react';

export function SignInPrompt({greeting}) {
  return (
    <main>
      <h1>
        The contract says: <span className=\\"greeting\\">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network (\\"testnet\\"). It works
        just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={signInWithNearWallet}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId}) {
  return (
    <button style={{ float: 'right' }} onClick={signOutNearWallet}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>src/App.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code> and <code>set_greeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>assembly/main.ts</code> – this is the source code for your <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.</li>
        <li>
          When you run <code>yarn dev</code>, the code in <code>assembly/main.ts</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to find the <code>dev</code> command.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org\\">the NEAR docs</a> or look through some <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://examples.near.org\\">example apps</a>.
      </p>
    </>
  );
}
",
  ],
  Array [
    "/assemblyscript_react/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/assemblyscript_react/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/assemblyscript_react/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/assemblyscript_react/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/assemblyscript_react/package.json",
    "{
  \\"name\\": \\"assemblyscript_react\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && npm run build && cp ./build/release/greeter.wasm ../out/contract.wasm\\",
    \\"test\\": \\"npm run build:contract && npm run test:unit && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && npm run test\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\",
    \\"@babel/core\\": \\"~7.18.2\\",
    \\"@babel/preset-env\\": \\"~7.18.2\\",
    \\"@babel/preset-react\\": \\"~7.17.12\\",
    \\"react-test-renderer\\": \\"~18.1.0\\",
    \\"ts-node\\": \\"^10.8.0\\",
    \\"typescript\\": \\"^4.7.2\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\",
    \\"react\\": \\"~18.1.0\\",
    \\"react-dom\\": \\"~18.1.0\\",
    \\"regenerator-runtime\\": \\"~0.13.9\\"
  },
  \\"resolutions\\": {
    \\"@babel/preset-env\\": \\"7.13.8\\"
  },
  \\"browserslist\\": {
    \\"production\\": [
      \\">0.2%\\",
      \\"not dead\\",
      \\"not op_mini all\\"
    ],
    \\"development\\": [
      \\"last 1 chrome version\\",
      \\"last 1 firefox version\\",
      \\"last 1 safari version\\"
    ]
  }
}",
  ],
]
`;

exports[`make all projects make project files contract 'assemblyscript' frontend 'vanilla' 1`] = `
Array [
  Array [
    "/assemblyscript_vanilla/.gitattributes",
    "package-lock.json linguist-generated=true -diff
yarn.lock linguist-generated=true -diff
",
  ],
  Array [
    "/assemblyscript_vanilla/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/assemblyscript_vanilla/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/assemblyscript_vanilla/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/assemblyscript_vanilla/contract/.gitignore",
    "node_modules
build
package-lock.json
yarn.lock
",
  ],
  Array [
    "/assemblyscript_vanilla/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12


Exploring The Code
==================

1. The main smart contract code lives in \`assembly/index.ts\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`npm run test\` script. This runs
   standard AssemblyScript tests using [as-pect].


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli
",
  ],
  Array [
    "/assemblyscript_vanilla/contract/as-pect.config.js",
    "module.exports = require('near-sdk-as/imports');",
  ],
  Array [
    "/assemblyscript_vanilla/contract/asconfig.json",
    "{
  \\"extends\\": \\"near-sdk-as/asconfig.json\\"
}
",
  ],
  Array [
    "/assemblyscript_vanilla/contract/assembly/__tests__/as-pect.d.ts",
    "/// <reference types=\\"@as-pect/assembly/types/as-pect\\" />",
  ],
  Array [
    "/assemblyscript_vanilla/contract/assembly/__tests__/main.spec.ts",
    "import { set_greeting, get_greeting } from '..';

describe('Greeting ', () => {
  it('should get the default greeting', () => {
    expect(get_greeting()).toBe('Hello');
  });
  it('should change the greeting', () => {
    set_greeting('howdy');
    expect(get_greeting()).toBe('howdy');
  });
});",
  ],
  Array [
    "/assemblyscript_vanilla/contract/assembly/as_types.d.ts",
    "/// <reference types=\\"near-sdk-as/assembly/as_types\\" />",
  ],
  Array [
    "/assemblyscript_vanilla/contract/assembly/index.ts",
    "/*
 * Example smart contract written in AssemblyScript
 *
 * Learn more about writing NEAR smart contracts with AssemblyScript:
 * https://near-docs.io/develop/welcome
 *
 */

import { logging, storage } from 'near-sdk-as';

const DEFAULT_MESSAGE = 'Hello';

// Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
export function get_greeting(): string {
  return storage.getPrimitive<string>('message', DEFAULT_MESSAGE);
}

// Public method - accepts a greeting, such as 'howdy', and records it
export function set_greeting(message: string): void {
  // Use logging.log to record logs permanently to the blockchain!
  logging.log(\`Saving greeting '\${message}'\`);
  storage.set<string>('message', message);
}",
  ],
  Array [
    "/assemblyscript_vanilla/contract/assembly/tsconfig.json",
    "{
  \\"extends\\": \\"assemblyscript/std/assembly.json\\",
  \\"include\\": [
    \\"./**/*.ts\\"
  ]
}
",
  ],
  Array [
    "/assemblyscript_vanilla/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"build\\": \\"asb\\",
    \\"test\\": \\"asp --nologo\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-as\\": \\"^3.2.3\\"
  }
}
",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
  <link rel=\\"icon\\" href=\\"assets/favicon.ico\\"/>
  <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\"/>
  <title>Welcome to NEAR</title>
  <link rel=\\"stylesheet\\" href=\\"assets/global.css\\">
</head>
<body>
<main id=\\"signed-out-flow\\" style=\\"display: none\\">
  <h1>
    The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
  </h1>
  <h3>
    Welcome to NEAR!
  </h3>
  <p>
    Your contract is storing a greeting message in the NEAR blockchain. To
    change it you need to sign in using the NEAR Wallet. It is very simple,
    just use the button below.
  </p>
  <p>
    Do not worry, this app runs in the test network (\\"testnet\\"). It works
    just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
    only for testing!
  </p>
  <p style=\\"text-align: center; margin-top: 2.5em\\">
    <button id=\\"sign-in-button\\">Sign in with NEAR Wallet</button>
  </p>
</main>

<div id=\\"signed-in-flow\\" style=\\"display: none\\">
  <button style=\\"float: right\\" id=\\"sign-out-button\\">
    Sign out <span data-behavior=\\"account-id\\"></span>
  </button>
  <main>
    <h1>
      The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
    </h1>
    <form class=\\"change\\">
      <label for=\\"greeting\\">Change greeting:</label>
      <div>
        <input
          autocomplete=\\"off\\"
          id=\\"greeting\\"
          data-behavior=\\"greeting\\"
        />
        <button>Save</button>
      </div>
    </form>
    <p>
      Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
    </p>
    <ol>
      <li>
        Look in <code>index.js</code> and <code>near-api.js</code> – you'll see <code>get_greeting</code>
        and <code>set_greeting</code> being called on <code>contract</code>.
        What's this?
      </li>
      <li>
        Ultimately, this <code>contract</code> code is defined in
        <code>assembly/index.ts</code> – this is the source code for your
        <a target=\\"_blank\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.
      </li>
      <li>
        When you run <code>yarn dev</code>, the code in
        <code>assembly/index.ts</code> gets deployed to the NEAR testnet. You
        can see how this happens by looking in <code>package.json</code> at the
        <code>scripts</code> section to find the <code>dev</code> command.
      </li>
    </ol>
    <hr>
    <p>
      To keep learning, check out
      <a target=\\"_blank\\" href=\\"https://docs.near.org\\">the NEAR docs</a>
      or look through some
      <a target=\\"_blank\\" href=\\"https://examples.near.org\\">example apps</a>.
    </p>
  </main>
</div>

<script src=\\"index.js\\" type=\\"module\\"></script>
</body>
</html>
",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/index.js",
    "import 'regenerator-runtime/runtime';
import {
  initContract,
  signInWithNearWallet,
  signOutNearWallet,
  setGreetingOnContract,
  getGreetingFromContract,
} from './near-api';

document.querySelector('form').onsubmit = doUserAction;
document.querySelector('#sign-in-button').onclick = signInWithNearWallet;
document.querySelector('#sign-out-button').onclick = signOutNearWallet;

// ====== Initialize the API for NEAR ======
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) {
      signedInFlow();
    } else {
      signedOutFlow();
    }
  })
  .catch(alert);

// Take the new greeting and send it to the contract
async function doUserAction(event) {
  event.preventDefault();
  const { greeting } = event.target.elements;
  document
    .querySelector('#signed-in-flow main')
    .classList.add('please-wait');
  try {
    // ===== Call smart-contract to save the value on then blockchain =====
    await setGreetingOnContract(greeting.value);
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    );
    throw e;
  }

  // ===== Fetch the data from the blockchain =====
  await fetchGreeting();
  document
    .querySelector('#signed-in-flow main')
    .classList.remove('please-wait');
}

// Get greeting from the contract on chain
async function fetchGreeting() {
  const currentGreeting = await getGreetingFromContract();

  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';

  fetchGreeting();
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId;
  });

  fetchGreeting();
}
",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import getConfig from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message){
  let response = await window.contract.set_greeting({
    args:{message: message}
  });
  return response;
}

export async function getGreetingFromContract(){
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/assemblyscript_vanilla/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}

module.exports = getConfig;
",
  ],
  Array [
    "/assemblyscript_vanilla/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/assemblyscript_vanilla/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/assemblyscript_vanilla/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/assemblyscript_vanilla/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/assemblyscript_vanilla/package.json",
    "{
  \\"name\\": \\"assemblyscript_vanilla\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && npm run build && cp ./build/release/greeter.wasm ../out/contract.wasm\\",
    \\"test\\": \\"npm run build:contract && npm run test:unit && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && npm run test\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\"
  }
}",
  ],
]
`;

exports[`make all projects make project files contract 'js' frontend 'none' 1`] = `
Array [
  Array [
    "/js_none/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/js_none/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/js_none/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/js_none/contract/babel.config.json",
    "{
  \\"plugins\\": [
    \\"near-sdk-js/lib/build-tools/near-bindgen-exporter\\",
    [\\"@babel/plugin-proposal-decorators\\", {\\"version\\": \\"legacy\\"}]
  ],
  \\"presets\\": [\\"@babel/preset-typescript\\"]
}",
  ],
  Array [
    "/js_none/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"type\\": \\"module\\",
  \\"scripts\\": {
    \\"build\\": \\"near-sdk build src/contract.js\\",
    \\"deploy\\": \\"npm run build && rm -rf neardev && near dev-deploy --wasmFile build/contract.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-js\\": \\"0.4.0-2\\"
  }
}
",
  ],
  Array [
    "/js_none/contract/src/contract.js",
    "import { NearBindgen, NearContract, call, view } from 'near-sdk-js';

// The @NearBindgen decorator allows this code to compile to Base64.
@NearBindgen
class MyContract extends NearContract {
  constructor() {
    //execute the NEAR Contract's constructor
    super();
    this.my_greeting = 'Hello';
  }

  // @call indicates that this is a 'change method' or a function
  // that changes state on the blockchain. Change methods cost gas.
  // For more info -> https://docs.near.org/docs/concepts/gas
  @call
  set_greeting({ message }) {   
    env.log(\`Saving greeting \${message}\`);
    this.my_greeting = message;
  }

  // @view indicates a 'view method' or a function that returns
  // the current values stored on the blockchain. View calls are free
  // and do not cost gas.
  @view
  get_greeting() {
    env.log(\`The current greeting is \${this.my_greeting}\`);
    return this.my_greeting;
  }
}
",
  ],
  Array [
    "/js_none/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/js_none/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/js_none/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/js_none/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/js_none/package.json",
    "{
  \\"name\\": \\"js_none\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"deploy\\": \\"cd contract && npm run deploy\\",
    \\"build\\": \\"npm run build:contract\\",
    \\"build:contract\\": \\"cd contract && npm run build\\",
    \\"test\\": \\"npm run build:contract && npm run test:integration\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\"
  },
  \\"dependencies\\": {}
}",
  ],
]
`;

exports[`make all projects make project files contract 'js' frontend 'react' 1`] = `
Array [
  Array [
    "/js_react/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/js_react/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/js_react/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/js_react/contract/babel.config.json",
    "{
  \\"plugins\\": [
    \\"near-sdk-js/lib/build-tools/near-bindgen-exporter\\",
    [\\"@babel/plugin-proposal-decorators\\", {\\"version\\": \\"legacy\\"}]
  ],
  \\"presets\\": [\\"@babel/preset-typescript\\"]
}",
  ],
  Array [
    "/js_react/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"type\\": \\"module\\",
  \\"scripts\\": {
    \\"build\\": \\"near-sdk build src/contract.js\\",
    \\"deploy\\": \\"npm run build && rm -rf neardev && near dev-deploy --wasmFile build/contract.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-js\\": \\"0.4.0-2\\"
  }
}
",
  ],
  Array [
    "/js_react/contract/src/contract.js",
    "import { NearBindgen, NearContract, call, view } from 'near-sdk-js';

// The @NearBindgen decorator allows this code to compile to Base64.
@NearBindgen
class MyContract extends NearContract {
  constructor() {
    //execute the NEAR Contract's constructor
    super();
    this.my_greeting = 'Hello';
  }

  // @call indicates that this is a 'change method' or a function
  // that changes state on the blockchain. Change methods cost gas.
  // For more info -> https://docs.near.org/docs/concepts/gas
  @call
  set_greeting({ message }) {   
    env.log(\`Saving greeting \${message}\`);
    this.my_greeting = message;
  }

  // @view indicates a 'view method' or a function that returns
  // the current values stored on the blockchain. View calls are free
  // and do not cost gas.
  @view
  get_greeting() {
    env.log(\`The current greeting is \${this.my_greeting}\`);
    return this.my_greeting;
  }
}
",
  ],
  Array [
    "/js_react/frontend/App.js",
    "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { getGreetingFromContract, setGreetingOnContract } from './near-api';
import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App() {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreetingFromContract()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }, []);

  /// If user not signed-in with wallet - show prompt
  if (!window.walletConnection.isSignedIn()) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    setGreetingOnContract(greetingInput.value)
      .then(getGreetingFromContract)
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  return (
    <>
      <SignOutButton accountId={window.accountId}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className=\\"greeting\\">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className='change'>
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete=\\"off\\"
              defaultValue={valueFromBlockchain}
              id=\\"greetingInput\\"
            />
            <button>Save</button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}
",
  ],
  Array [
    "/js_react/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/js_react/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/js_react/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/js_react/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/js_react/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"assets/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id=\\"root\\"></div>
    <script src=\\"./index.js\\" type=\\"module\\"></script>
  </body>
</html>
",
  ],
  Array [
    "/js_react/frontend/index.js",
    "import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import { initContract } from './near-api';

const reactRoot = createRoot(document.querySelector('#root'));

window.nearInitPromise = initContract()
  .then(() => {
    reactRoot.render(<App />);
  })
  .catch(e => {
    reactRoot.render(<div style={{color: 'red'}}>Error: <code>{e.message}</code></div>);
    console.error(e);
  });
",
  ],
  Array [
    "/js_react/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { getConfig}  from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message) {
  let response = await window.contract.set_greeting({
    args: { message: message }
  });
  return response;
}

export async function getGreetingFromContract() {
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/js_react/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

export function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}
",
  ],
  Array [
    "/js_react/frontend/ui-components.js",
    "import { signInWithNearWallet, signOutNearWallet } from './near-api';
import React from 'react';

export function SignInPrompt({greeting}) {
  return (
    <main>
      <h1>
        The contract says: <span className=\\"greeting\\">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network (\\"testnet\\"). It works
        just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={signInWithNearWallet}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId}) {
  return (
    <button style={{ float: 'right' }} onClick={signOutNearWallet}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>src/App.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code> and <code>set_greeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>assembly/main.ts</code> – this is the source code for your <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.</li>
        <li>
          When you run <code>yarn dev</code>, the code in <code>assembly/main.ts</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to find the <code>dev</code> command.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org\\">the NEAR docs</a> or look through some <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://examples.near.org\\">example apps</a>.
      </p>
    </>
  );
}
",
  ],
  Array [
    "/js_react/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/js_react/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/js_react/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/js_react/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/js_react/package.json",
    "{
  \\"name\\": \\"js_react\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"cd contract && npm run deploy\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && npm run build\\",
    \\"test\\": \\"npm run build:contract && npm run test:integration\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\",
    \\"@babel/core\\": \\"~7.18.2\\",
    \\"@babel/preset-env\\": \\"~7.18.2\\",
    \\"@babel/preset-react\\": \\"~7.17.12\\",
    \\"react-test-renderer\\": \\"~18.1.0\\",
    \\"ts-node\\": \\"^10.8.0\\",
    \\"typescript\\": \\"^4.7.2\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\",
    \\"react\\": \\"~18.1.0\\",
    \\"react-dom\\": \\"~18.1.0\\",
    \\"regenerator-runtime\\": \\"~0.13.9\\"
  },
  \\"resolutions\\": {
    \\"@babel/preset-env\\": \\"7.13.8\\"
  },
  \\"browserslist\\": {
    \\"production\\": [
      \\">0.2%\\",
      \\"not dead\\",
      \\"not op_mini all\\"
    ],
    \\"development\\": [
      \\"last 1 chrome version\\",
      \\"last 1 firefox version\\",
      \\"last 1 safari version\\"
    ]
  }
}",
  ],
]
`;

exports[`make all projects make project files contract 'js' frontend 'vanilla' 1`] = `
Array [
  Array [
    "/js_vanilla/.gitattributes",
    "package-lock.json linguist-generated=true -diff
yarn.lock linguist-generated=true -diff
",
  ],
  Array [
    "/js_vanilla/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/js_vanilla/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/js_vanilla/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/js_vanilla/contract/babel.config.json",
    "{
  \\"plugins\\": [
    \\"near-sdk-js/lib/build-tools/near-bindgen-exporter\\",
    [\\"@babel/plugin-proposal-decorators\\", {\\"version\\": \\"legacy\\"}]
  ],
  \\"presets\\": [\\"@babel/preset-typescript\\"]
}",
  ],
  Array [
    "/js_vanilla/contract/package.json",
    "{
  \\"name\\": \\"greeter\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"type\\": \\"module\\",
  \\"scripts\\": {
    \\"build\\": \\"near-sdk build src/contract.js\\",
    \\"deploy\\": \\"npm run build && rm -rf neardev && near dev-deploy --wasmFile build/contract.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\"
  },
  \\"dependencies\\": {
    \\"near-sdk-js\\": \\"0.4.0-2\\"
  }
}
",
  ],
  Array [
    "/js_vanilla/contract/src/contract.js",
    "import { NearBindgen, NearContract, call, view } from 'near-sdk-js';

// The @NearBindgen decorator allows this code to compile to Base64.
@NearBindgen
class MyContract extends NearContract {
  constructor() {
    //execute the NEAR Contract's constructor
    super();
    this.my_greeting = 'Hello';
  }

  // @call indicates that this is a 'change method' or a function
  // that changes state on the blockchain. Change methods cost gas.
  // For more info -> https://docs.near.org/docs/concepts/gas
  @call
  set_greeting({ message }) {   
    env.log(\`Saving greeting \${message}\`);
    this.my_greeting = message;
  }

  // @view indicates a 'view method' or a function that returns
  // the current values stored on the blockchain. View calls are free
  // and do not cost gas.
  @view
  get_greeting() {
    env.log(\`The current greeting is \${this.my_greeting}\`);
    return this.my_greeting;
  }
}
",
  ],
  Array [
    "/js_vanilla/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/js_vanilla/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/js_vanilla/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/js_vanilla/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/js_vanilla/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
  <link rel=\\"icon\\" href=\\"assets/favicon.ico\\"/>
  <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\"/>
  <title>Welcome to NEAR</title>
  <link rel=\\"stylesheet\\" href=\\"assets/global.css\\">
</head>
<body>
<main id=\\"signed-out-flow\\" style=\\"display: none\\">
  <h1>
    The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
  </h1>
  <h3>
    Welcome to NEAR!
  </h3>
  <p>
    Your contract is storing a greeting message in the NEAR blockchain. To
    change it you need to sign in using the NEAR Wallet. It is very simple,
    just use the button below.
  </p>
  <p>
    Do not worry, this app runs in the test network (\\"testnet\\"). It works
    just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
    only for testing!
  </p>
  <p style=\\"text-align: center; margin-top: 2.5em\\">
    <button id=\\"sign-in-button\\">Sign in with NEAR Wallet</button>
  </p>
</main>

<div id=\\"signed-in-flow\\" style=\\"display: none\\">
  <button style=\\"float: right\\" id=\\"sign-out-button\\">
    Sign out <span data-behavior=\\"account-id\\"></span>
  </button>
  <main>
    <h1>
      The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
    </h1>
    <form class=\\"change\\">
      <label for=\\"greeting\\">Change greeting:</label>
      <div>
        <input
          autocomplete=\\"off\\"
          id=\\"greeting\\"
          data-behavior=\\"greeting\\"
        />
        <button>Save</button>
      </div>
    </form>
    <p>
      Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
    </p>
    <ol>
      <li>
        Look in <code>index.js</code> and <code>near-api.js</code> – you'll see <code>get_greeting</code>
        and <code>set_greeting</code> being called on <code>contract</code>.
        What's this?
      </li>
      <li>
        Ultimately, this <code>contract</code> code is defined in
        <code>assembly/index.ts</code> – this is the source code for your
        <a target=\\"_blank\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.
      </li>
      <li>
        When you run <code>yarn dev</code>, the code in
        <code>assembly/index.ts</code> gets deployed to the NEAR testnet. You
        can see how this happens by looking in <code>package.json</code> at the
        <code>scripts</code> section to find the <code>dev</code> command.
      </li>
    </ol>
    <hr>
    <p>
      To keep learning, check out
      <a target=\\"_blank\\" href=\\"https://docs.near.org\\">the NEAR docs</a>
      or look through some
      <a target=\\"_blank\\" href=\\"https://examples.near.org\\">example apps</a>.
    </p>
  </main>
</div>

<script src=\\"index.js\\" type=\\"module\\"></script>
</body>
</html>
",
  ],
  Array [
    "/js_vanilla/frontend/index.js",
    "import 'regenerator-runtime/runtime';
import {
  initContract,
  signInWithNearWallet,
  signOutNearWallet,
  setGreetingOnContract,
  getGreetingFromContract,
} from './near-api';

document.querySelector('form').onsubmit = doUserAction;
document.querySelector('#sign-in-button').onclick = signInWithNearWallet;
document.querySelector('#sign-out-button').onclick = signOutNearWallet;

// ====== Initialize the API for NEAR ======
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) {
      signedInFlow();
    } else {
      signedOutFlow();
    }
  })
  .catch(alert);

// Take the new greeting and send it to the contract
async function doUserAction(event) {
  event.preventDefault();
  const { greeting } = event.target.elements;
  document
    .querySelector('#signed-in-flow main')
    .classList.add('please-wait');
  try {
    // ===== Call smart-contract to save the value on then blockchain =====
    await setGreetingOnContract(greeting.value);
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    );
    throw e;
  }

  // ===== Fetch the data from the blockchain =====
  await fetchGreeting();
  document
    .querySelector('#signed-in-flow main')
    .classList.remove('please-wait');
}

// Get greeting from the contract on chain
async function fetchGreeting() {
  const currentGreeting = await getGreetingFromContract();

  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';

  fetchGreeting();
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId;
  });

  fetchGreeting();
}
",
  ],
  Array [
    "/js_vanilla/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import getConfig from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message){
  let response = await window.contract.set_greeting({
    args:{message: message}
  });
  return response;
}

export async function getGreetingFromContract(){
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/js_vanilla/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}

module.exports = getConfig;
",
  ],
  Array [
    "/js_vanilla/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/js_vanilla/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/js_vanilla/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/js_vanilla/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/js_vanilla/package.json",
    "{
  \\"name\\": \\"js_vanilla\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"cd contract && npm run deploy\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && npm run build\\",
    \\"test\\": \\"npm run build:contract && npm run test:integration\\",
    \\"test:integration\\": \\"cd integration-tests && npm run test\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\"
  }
}",
  ],
]
`;

exports[`make all projects make project files contract 'rust' frontend 'none' 1`] = `
Array [
  Array [
    "/rust_none/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/rust_none/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/rust_none/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/rust_none/contract/.cargo/config",
    "[build]
rustflags = [\\"-C\\", \\"link-args=-s\\"]
",
  ],
  Array [
    "/rust_none/contract/.gitignore",
    "target
",
  ],
  Array [
    "/rust_none/contract/Cargo.toml",
    "[package]
name = \\"greeter\\"
version = \\"1.0.0\\"
authors = [\\"Near Inc <hello@near.org>\\"]
edition = \\"2021\\"

[lib]
crate-type = [\\"cdylib\\", \\"rlib\\"]

[dependencies]
near-sdk = \\"4.0.0\\"
uint = { version = \\"0.9.3\\", default-features = false }

[profile.release]
codegen-units = 1
opt-level = \\"z\\"
lto = true
debug = false
panic = \\"abort\\"
overflow-checks = true

[workspace]
members = []
",
  ],
  Array [
    "/rust_none/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in \`src/lib.rs\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`cargo test\`.


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html
",
  ],
  Array [
    "/rust_none/contract/src/lib.rs",
    "/*
 * Example smart contract written in RUST
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://near-docs.io/develop/Contract
 *
 */

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = \\"Hello\\";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract{
    fn default() -> Self{
        Self{message: DEFAULT_MESSAGE.to_string()}
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as \\"howdy\\", and records it
    pub fn set_greeting(&mut self, message: String) {
        // Use env::log to record logs permanently to the blockchain!
        log!(\\"Saving greeting {}\\", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default \\"Hello\\" greeting
        assert_eq!(
            contract.get_greeting(),
            \\"Hello\\".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting(\\"howdy\\".to_string());
        assert_eq!(
            contract.get_greeting(),
            \\"howdy\\".to_string()
        );
    }
}
",
  ],
  Array [
    "/rust_none/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/rust_none/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/rust_none/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/rust_none/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/rust_none/package.json",
    "{
  \\"name\\": \\"rust_none\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract\\",
    \\"build:contract\\": \\"cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release\\",
    \\"test\\": \\"npm run test:contract && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && cargo test\\",
    \\"test:integration\\": \\"cd integration-tests/workspaces-rs-tests && cargo run --example integration-tests\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\"
  },
  \\"dependencies\\": {}
}",
  ],
]
`;

exports[`make all projects make project files contract 'rust' frontend 'react' 1`] = `
Array [
  Array [
    "/rust_react/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/rust_react/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/rust_react/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/rust_react/contract/.cargo/config",
    "[build]
rustflags = [\\"-C\\", \\"link-args=-s\\"]
",
  ],
  Array [
    "/rust_react/contract/.gitignore",
    "target
",
  ],
  Array [
    "/rust_react/contract/Cargo.toml",
    "[package]
name = \\"greeter\\"
version = \\"1.0.0\\"
authors = [\\"Near Inc <hello@near.org>\\"]
edition = \\"2021\\"

[lib]
crate-type = [\\"cdylib\\", \\"rlib\\"]

[dependencies]
near-sdk = \\"4.0.0\\"
uint = { version = \\"0.9.3\\", default-features = false }

[profile.release]
codegen-units = 1
opt-level = \\"z\\"
lto = true
debug = false
panic = \\"abort\\"
overflow-checks = true

[workspace]
members = []
",
  ],
  Array [
    "/rust_react/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in \`src/lib.rs\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`cargo test\`.


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html
",
  ],
  Array [
    "/rust_react/contract/src/lib.rs",
    "/*
 * Example smart contract written in RUST
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://near-docs.io/develop/Contract
 *
 */

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = \\"Hello\\";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract{
    fn default() -> Self{
        Self{message: DEFAULT_MESSAGE.to_string()}
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as \\"howdy\\", and records it
    pub fn set_greeting(&mut self, message: String) {
        // Use env::log to record logs permanently to the blockchain!
        log!(\\"Saving greeting {}\\", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default \\"Hello\\" greeting
        assert_eq!(
            contract.get_greeting(),
            \\"Hello\\".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting(\\"howdy\\".to_string());
        assert_eq!(
            contract.get_greeting(),
            \\"howdy\\".to_string()
        );
    }
}
",
  ],
  Array [
    "/rust_react/frontend/App.js",
    "import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { getGreetingFromContract, setGreetingOnContract } from './near-api';
import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';


export default function App() {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreetingFromContract()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }, []);

  /// If user not signed-in with wallet - show prompt
  if (!window.walletConnection.isSignedIn()) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    setGreetingOnContract(greetingInput.value)
      .then(getGreetingFromContract)
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  return (
    <>
      <SignOutButton accountId={window.accountId}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className=\\"greeting\\">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className='change'>
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete=\\"off\\"
              defaultValue={valueFromBlockchain}
              id=\\"greetingInput\\"
            />
            <button>Save</button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}
",
  ],
  Array [
    "/rust_react/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/rust_react/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/rust_react/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/rust_react/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/rust_react/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <meta charset=\\"utf-8\\" />
    <link rel=\\"icon\\" href=\\"assets/favicon.ico\\" />
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />
    <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id=\\"root\\"></div>
    <script src=\\"./index.js\\" type=\\"module\\"></script>
  </body>
</html>
",
  ],
  Array [
    "/rust_react/frontend/index.js",
    "import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import { initContract } from './near-api';

const reactRoot = createRoot(document.querySelector('#root'));

window.nearInitPromise = initContract()
  .then(() => {
    reactRoot.render(<App />);
  })
  .catch(e => {
    reactRoot.render(<div style={{color: 'red'}}>Error: <code>{e.message}</code></div>);
    console.error(e);
  });
",
  ],
  Array [
    "/rust_react/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { getConfig}  from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message) {
  let response = await window.contract.set_greeting({
    args: { message: message }
  });
  return response;
}

export async function getGreetingFromContract() {
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/rust_react/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

export function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}
",
  ],
  Array [
    "/rust_react/frontend/ui-components.js",
    "import { signInWithNearWallet, signOutNearWallet } from './near-api';
import React from 'react';

export function SignInPrompt({greeting}) {
  return (
    <main>
      <h1>
        The contract says: <span className=\\"greeting\\">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network (\\"testnet\\"). It works
        just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={signInWithNearWallet}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId}) {
  return (
    <button style={{ float: 'right' }} onClick={signOutNearWallet}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>src/App.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code> and <code>set_greeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>assembly/main.ts</code> – this is the source code for your <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.</li>
        <li>
          When you run <code>yarn dev</code>, the code in <code>assembly/main.ts</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to find the <code>dev</code> command.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://docs.near.org\\">the NEAR docs</a> or look through some <a target=\\"_blank\\" rel=\\"noreferrer\\" href=\\"https://examples.near.org\\">example apps</a>.
      </p>
    </>
  );
}
",
  ],
  Array [
    "/rust_react/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/rust_react/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/rust_react/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/rust_react/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/rust_react/package.json",
    "{
  \\"name\\": \\"rust_react\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release\\",
    \\"test\\": \\"npm run test:contract && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && cargo test\\",
    \\"test:integration\\": \\"cd integration-tests/workspaces-rs-tests && cargo run --example integration-tests\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\",
    \\"@babel/core\\": \\"~7.18.2\\",
    \\"@babel/preset-env\\": \\"~7.18.2\\",
    \\"@babel/preset-react\\": \\"~7.17.12\\",
    \\"react-test-renderer\\": \\"~18.1.0\\",
    \\"ts-node\\": \\"^10.8.0\\",
    \\"typescript\\": \\"^4.7.2\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\",
    \\"react\\": \\"~18.1.0\\",
    \\"react-dom\\": \\"~18.1.0\\",
    \\"regenerator-runtime\\": \\"~0.13.9\\"
  },
  \\"resolutions\\": {
    \\"@babel/preset-env\\": \\"7.13.8\\"
  },
  \\"browserslist\\": {
    \\"production\\": [
      \\">0.2%\\",
      \\"not dead\\",
      \\"not op_mini all\\"
    ],
    \\"development\\": [
      \\"last 1 chrome version\\",
      \\"last 1 firefox version\\",
      \\"last 1 safari version\\"
    ]
  }
}",
  ],
]
`;

exports[`make all projects make project files contract 'rust' frontend 'vanilla' 1`] = `
Array [
  Array [
    "/rust_vanilla/.gitattributes",
    "package-lock.json linguist-generated=true -diff
yarn.lock linguist-generated=true -diff
",
  ],
  Array [
    "/rust_vanilla/.gitignore",
    "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# Developer note: near.gitignore will be renamed to .gitignore upon project creation
# dependencies
node_modules
/.pnp
.pnp.js

# build
/out
/dist

# keys
/templates/react/neardev

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
/.cache

npm-debug.log*
yarn-debug.log*
yarn-error.log*
",
  ],
  Array [
    "/rust_vanilla/.gitpod.yml",
    "tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser
",
  ],
  Array [
    "/rust_vanilla/README.md",
    "near-blank-project
==================

This app was initialized with [create-near-app]


Quick Start
===========

Build and deploy your contract to TestNet with a temporary dev account:

    \`npm run deploy\`.

If you have a frontend, run \`npm start\`. This will run a dev server.


Exploring The Code
==================

1. The smart-contract code lives in the \`/contract\` folder. See the README there for
   more info. In blockchain apps the smart contract is the \\"backend\\" of your app.
2. The frontend code lives in the \`/frontend\` folder. \`/frontend/index.html\` is a great
   place to start exploring. Note that it loads in \`/frontend/index.js\`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: \`npm test\`, this will run the tests in \`integration-tests\` directory.


Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run \`npm run deploy\`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:


Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local \`node_modules\` folder when you ran \`npm install\`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all \`near\` commands with \`npx\`

Ensure that it's installed with \`near --version\` (or \`npx near --version\`)


Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as \`your-name.testnet\`, you can deploy your contract to \`near-blank-project.your-name.testnet\`. Assuming you've already created an account on [NEAR Wallet], here's how to create \`near-blank-project.your-name.testnet\`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace \`YOUR-NAME\` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID:

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile contract/build/contract.wasm


Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in \`src/config.js\` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'



Troubleshooting
===============

On Windows, if you're seeing an error containing \`EPERM\` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.


  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages
",
  ],
  Array [
    "/rust_vanilla/contract/.cargo/config",
    "[build]
rustflags = [\\"-C\\", \\"link-args=-s\\"]
",
  ],
  Array [
    "/rust_vanilla/contract/.gitignore",
    "target
",
  ],
  Array [
    "/rust_vanilla/contract/Cargo.toml",
    "[package]
name = \\"greeter\\"
version = \\"1.0.0\\"
authors = [\\"Near Inc <hello@near.org>\\"]
edition = \\"2021\\"

[lib]
crate-type = [\\"cdylib\\", \\"rlib\\"]

[dependencies]
near-sdk = \\"4.0.0\\"
uint = { version = \\"0.9.3\\", default-features = false }

[profile.release]
codegen-units = 1
opt-level = \\"z\\"
lto = true
debug = false
panic = \\"abort\\"
overflow-checks = true

[workspace]
members = []
",
  ],
  Array [
    "/rust_vanilla/contract/README.md",
    "NEAR blank project Smart Contract
=================================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]


Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in \`src/lib.rs\`.
2. There are two functions to the smart contract: \`get_greeting\` and \`set_greeting\`.
3. Tests: You can run smart contract tests with the \`cargo test\`.


  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html
",
  ],
  Array [
    "/rust_vanilla/contract/src/lib.rs",
    "/*
 * Example smart contract written in RUST
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://near-docs.io/develop/Contract
 *
 */

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};

// Define the default message
const DEFAULT_MESSAGE: &str = \\"Hello\\";

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    message: String,
}

// Define the default, which automatically initializes the contract
impl Default for Contract{
    fn default() -> Self{
        Self{message: DEFAULT_MESSAGE.to_string()}
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    // Public method - returns the greeting saved, defaulting to DEFAULT_MESSAGE
    pub fn get_greeting(&self) -> String {
        return self.message.clone();
    }

    // Public method - accepts a greeting, such as \\"howdy\\", and records it
    pub fn set_greeting(&mut self, message: String) {
        // Use env::log to record logs permanently to the blockchain!
        log!(\\"Saving greeting {}\\", message);
        self.message = message;
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default \\"Hello\\" greeting
        assert_eq!(
            contract.get_greeting(),
            \\"Hello\\".to_string()
        );
    }

    #[test]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting(\\"howdy\\".to_string());
        assert_eq!(
            contract.get_greeting(),
            \\"howdy\\".to_string()
        );
    }
}
",
  ],
  Array [
    "/rust_vanilla/frontend/assets/favicon.ico",
    "�PNG

   
IHDR  @  @   ��Na   	pHYs  %  %IR$�    IDATx���p��}�qɖdK����6 c������6	?B�
m�����N���܄?n&����M��t�!�^2-�9���ޅ��p�~�#l�1�e�mY��Y�1�m�c��y����4F�����v��/_|�
 �� \\" $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ �[e�j�عq����;���pG[뎡��y�O��иh���Ο�����;�g��G��ŗ�ٱ��pGOW�)�����q55���]�h�'?2y֌�/!���#.��qp����/��]7�b�Y��MW�Xt劺I�g�B8�]��nx��Z��t��kΠ����K/\\\\q�ͽ����J�Ҽ����7_ze�w��U+>���ia�g�^�a����������������/�؟��^	,-�랹���{���H�-[|����E>P��
?������+��7~ܒիd,{����<q�E��p�V���[������ֺ��\`L��_��߿y�Mk
>C&,O]�O��Ћ?\\\\[ƣ�k���s7,��_����?������\\\\��S_���#K��������W�^��V�Xs׭�n�~��o���YSW���[?t͇>Cl�?���\\"�IK���w�����[o<�Ҝ%M
ӧ��9���<�寗���۷��:��sٲ�O��e��y��o���ݓ�Au�?��/�=�5�b�4���׾]�k��-����oZ���3D�8�1X�4��p��������!�\\\\3_~��G������e\\"�z
Ұʔ�5S�r\\"\`9H�^�vpw*��1�vnܒ�5��G�|���w���G��kk��ĽD9���?�ڷ��;
>Cn�Z�����N�~��c�>�l��	F�b�j�h�羮Ñz�ֺ��� �����[��^3����s_:c]FF�b{���y�װ��rC�[��@���7��]�����%z�!��vn�R�������y]���i��ex���ݶ}��-.Ǹ,��7b�~�>���4�s�X��a�' 4�������U.F��y�_�7��tú�u�{���������(1'-������P?J�I�Bji^W���kF�yhk��Ɉ����FXPRK�S9�Qbtm����=��~�*���sp��@��Qb\\\\]�?��c=�}�|���F$\`�!��2J�h�)_ܡ��U�,��P+�a1J'��N���2&\`�t�w���┌ci���_n��X�Zw��#\`�d��F�Q�4������U9��\`�V��DF���>�R	?\\\\��\`v��\\"�H4JLY�w��
��ʉ�z�<,F�i|�W������ʆ��񂣐Qbj\\"����U�W�t%&e�)_~˓#iF��x��ԋ��3JL��>��h�%�WK���M���˥u�����E�0�K��u�� I���Qb�ܽ/ק|�#�Ēx���}K�H���Qbix��0�1Jkټ�y0B2J;�����|���Q�X����g�QUuu~�F~������M�>���PUU=n\\\\���>#0��\\"����G��ށv���0B0b3J,��������謮��0�0�3J��;c���ή�q��h90J������;vU
dk�����	�đy�;�߽嵣Ū�0b02a�8-�Om[�B�����0�0�a�8,�ֽ��?Hӱ~i�Y1J��;�Z���UJÈI�ȍQ�ڿs��o|w�MF\\\\F��Ϡ�����|����X�4���<%�RwG�c��ǎ��O������'��Sz��ص���Pi�	�2J|����]/o;�+
#<#gF�'�����/�<��ws�a�&\`d�(���j�/ox���[�adB��_����w��?�
#FE��Q���m��\`OWw�I��0� \`T��%�tv��G{�{N�G�ȉ�Q)*m�������j{��i90*HE�7?��}���ڼ7BF6��R!��W��ӻ^�z�.F�����(q��[�oh썆�1�e<Jlkݾy����l���>� \`�J��A�����o~��C�t���?�/|�A������%v:������9ћ�v�m�46-,�0��1*�MW�yk�s��(�������ޞ�cMJ�a���g��YUp0<�h-]�j�M����lF��~���kO�
[�z��O�)86���햦�+���F�[�z�㝃�*�v��-[�殨7�I��Qk�iAГz��s㖶��&'��\\\\�����(8!�8�&��w%�X�k;vmz����۰	�n�򿭛d:O�E3e���R:���ן�8���6aR�M_�S�(.���K�ȁC��7�\\"��]���o<7�=�$K�(2�����y����z{O�'�]w��{���U�0��(qL�v�l[�Bo_ՉT$ܰ��|�G.O�|��1&����o�<t�ؽsi7�˖]�'���$:cL%��7_z�c���<j��:{�շݒ�9$�X1J,����:��ޓ�l�&5N��[]����!90ƐQbxk�W__?�lX]C�uw��z1���e�X]��_y�X��o�u���Z87��F��1g�8J]�;v��e0-�7l���4k��=cT��G���w�������x�οne�?VG�(�đ���}kskOW��NT'ް�+.^񙏗�,Q��1J�}���s�s�I�z�næ/��]�(1�t�������84���6mެk��o�N�P��FI%Q���Gߣ�X{RnXm��K��E�	�f���:�9�ή�'�G�rî��ߜ6w�X�($\`��Q��tvڳ�=�H�a����sg��h\`	e\`�x:=]��w����R�d�_włKOs(0���0J,���׾�����w�.�6l��%���>)���Q6F�'���;�{_oO�\`*oٍؔ]�т���0��(�����r��}D�
�2k��}}�@�	ef�XUUu�\`{����7q�nX턺7���PWpPjF�U�(�������og�h�j&�]����8er�A@�Wɣ�������'�'�-���g�UpPF*s�����u�ȱ�$߰�lΒEe#\`���F�����G�T��J�
�s~����/8('#!4J�����x�׉tO�a���\\\\|�� e&\`��BF��=����G��z�&͘�d�UG �'\`$'�Qb_o_UU�IMJ�a5�.��55u��'\`$'�Qb��iDU�
���[���ת�0R��(�DB�oXӕ+�O-8 H�����G�v�O�?��[����y��v�f�3o�9��iH�����G��6lڼYg_���ۅ���y��^��M^�₂oR$\`�.�QbJ
���شr��ښ��R$\`��+%�Ѱ�u�/�P�D��!�WJL�a�/�8eR�w�0�����ڰ���)_�#\`D��+%��a��ϙ:gf�w�0����Kް)sg.ZX�}@ F0��}s	V�P�x�',��O�o�\\\\���M�8���ƍ_������1n�����s��	Q����cٰY:��~B��\\"0���Ǧag-��^d@��-��o.z�&ϜQ?}J���0b��XԆ5L�2y�Y�I�/�Qb�V;qٍ�4D%\`� �Q�V3�nڼY�(&\`d\\"�Q�(6n��)�f|%d��|�?JQêǏ�<k��|�#+���߰��S��Y0�R���4l�I��E���T�(qh
��0A�Ș����%~P�����M
yK�H��SE�O߰����&|5dE��VE�Oհ�7��8�����K!+F�*b�Xа�u��E%0rV)�ē6���Z��F�*e�8ذ���|�$\`�RF�Pa��P)�D�$F���Q\\"T��T�(*��QA*h�@��,4J��	�(� \`T\\"�DȀ�Q��!:�r%BhF�2J����f�q	��(�00J����!\\"�c�!�c�!�w%B �a�Q���������(B0*CowO__�Pf��0*BoO�@�����RÌ!qF�z:�n~���o�
3J��	���������7܆%B����vww�wFkd
3J�d	����=r���x�F�0�DH�������������;��mÌ!AF����������[�?�\\"4�(R#\`d���}=�]U�����0�DH����C{��WU�@���0�DH�����}�9p��s���0�DH����#����n�ƦaF��#]�;���}�Ic�0�DH�����#��^���&�mÌ�����z����zow���aF�PvFl}����l���=�6�(�K��m��׺ڏ���
3J�20۳��#��VYf��\\"\`D��������?P��6�(�B�����{��q�7eo�Q\\"���O�ûZ���O�m�Q\\"���̑���?��x�j�Q\\"���Iow���7�tu�*��%B)	a�v�l[�B����J�aF�P2Fo<���;�N�Q�
3J��0bx㹗���X\`�o�Q\\"���@�k;�^�1���I�aF�PF��Zw������/PÌa�	I;�������!��0�DSF������g��tu�G��%��0�������tv�V�
;E��2J�1\\"\`����{�Ï���7i7�������tg�(Ƃ���mO=���c�H�a?H�ǟ�4%�X0�����j�Vur~nXUuuM]��C�D(:#-�^޺cC�@4��\\"oXUU��	U����dF�P\\\\FB�l}��G�8���6x���5�(�H�H��=�6���w˔|�������)%B�I8r��3�?��q�x�Ro��)�����)%BQ������?���H�{��p�j'N��8a���(�B�(�u�������T��V;qB����<iF�0zF�mx��G���2%ڰq55�fL+�3J�Q0�i���x~�ɡJ�a���M�;�z\\\\�~j�a4��y㹗Z��z�S��mXUUմ���X�AF�0bFy�ݶ������䖤ݰ��g�L��se�##\`��;;w?�?�ϱ�Ghشy��n4h�##\`�ZwG�c���9я�6�q��g�gf�# \`�TwG����ݮ���mI�
��>e���%8EF�0\\\\FI����i���
��f�j&֝�pn�ΏQ\\"��Q:���������OI6��~�������Q\\"��Q\\"/���mO�p�>%ְ�q�f�wN��5�(�H�(��O>��?=�w�>�԰��?�V)�\`�C$\`����x�{F���Y�h¤�2^1�a(�����7��o����W�
klZ8u�̲_+��	c��p����t����߰isg�\\\\�0���Q\\"���1V�w<���ypϾ��߰	��_|~R��D8c�<��h{m��)J�a&7,���F�p:ƘX��ﶮ���ޤ۰q5��]�||mM�W�D8��Z�׵�]w�ޤذq������OL��\`��$\`YK�߸������\`���iS�%B!���Z����*B�^rA�G���}��ik���/}���Ix�ݰ�s�Y�(��(N&\`GW{G�=���^�Rmؔ�3λ��p��Q\\"� \`AW{���7m�;N�O�װ��S��^U��\`�'E�����^�Rj��ښ�n�hM]m�w�Q\\"0F�{ؼv�ϧѰ�5�o\\\\�^���xU�h�4�{�k���$а�����8��;��(�Qx�װ��aK?~UcS*��;zF�T8���԰��7��evqG%|�A�(��7l梳/�ĵ�]��G��a0ʤ�
�<s�E�_��z��!\`�OI6qʤ����fB]�t�Q\\"���QVcܰ����>�ɼ�5(�(FF�(��l؇���sfV�Ez�# \`$\`lv��o<7�BodB�a��4�a�V]r�e�*��
=J��0�Q���}����ʼd��FJ�Ѱ�sg.�iM%_�F�T#1�k�Թ�>���[[?��/V�D*�����6�fB���ߤ^��ɞ���5l�]�N_0�z�Q\\"y0R5̆���_���%�7#aCn��?�h�%.�BF�dL�H�v�U�.�tE���(�\\\\	�;cæ/�s�m����(�,	��ag-��ow	�Q\\"�0�(hX�ĺ���Y(�Q\\"�0�8�a��n��6y�Y.��3J$3F(�v��F���|Q%�#������7�|�J��%�
#�%�W͏�Q\\"y0\\"��l��z(�D2 \`��ش����py�Q\\"�	1�5��?�E�$��1J$:#��z}��UtF��&\`p�ή�.��\`�H\\\\F�V�ykӕ�c�(����-Y�j�U.��f�HDF��V�0�/�D�0�ش@�J�(�p�M�5�h���E�HN]C���]���(�@��|��ۍ���(�(���������B)/�DB0����F�0J$}F*��^u�m��8a�H�,�\\\\�(nlZp�z%��F�nq�#\`�d�qc���4U�(���p,���6p�k�_s׭ꕬ�%��Õ=ffv���|�F󉫐Qb~?\\\\��\`2��������P	�D��G����T����?w��|ُ��;�g��~�/Y����X�aҕ�(1��J#\`�4]yI�C�J�Ae<J��Ǫ	X<SfϘ�lq��p4_�ab�r�8o��)�g|��	XHK�\\\\�;x��/������%����p��5��̊�c]C�g���f �Q�Y3�����.����[����(1��,��kV���������;7'y���Z�%\`�]��7G�旬^���k
>Ll��Bh����\\\\��y���*�(q�M���Fhۧ�x{�w$66-���;
>L>���x*}t��Y3V�ukUuu�G10;�>) �(�{ �A����5����&x��y�#*A�Q�Al,���o]�kW�v G�*�;�R�C4l���Z�A�2�?������[�����8Yc����^9��?��J?�hZ���m��m��{<u
����n[���>C��O=�_�ų��=	�zeF��Ҵry�û_y�\\\\5���ir%l�[�[;�L�4�5�_w���+3��s.[v��9�?�����ć6o������0evc�g�,
ӧ.����;�ڿ���s9n?��e�!��|�a~����}��w'^��<���y�_�������)��7���s7Z�fI�r���������1=ƣ/��^c�S:�{��>���
����jlZp�m��C;c��G����k׍�=�o�u��~A��vn����z�͗^)ͩ�2k�埻�#^��J��7�����ug�Թ3/���o���C[��
��v��ucw��-[�t�U�U!���ڴuÃ������ݯ�0}����_������4IDW{Ƕ�Z�o(���zUӕ��+��X�:�g�K?�Ů��ڶ����9]���k�j�-����noQt;7nٹqK۶�퇇uccӂ�����?�i���ηѨL@H^J
������������������������������������������������������������������������@D>�  �IDAT���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������x����?�\\"7�>\`�    IEND�B\`�",
  ],
  Array [
    "/rust_vanilla/frontend/assets/global.css",
    "* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 26em;
}

main.please-wait {
  opacity: 0.5;
  cursor: wait;
}

h1 {
  background-image: url(./logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0;
  text-align: center;
  font-size: 1.5em;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

input {
  background-color: var(--light-gray);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(./logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}
",
  ],
  Array [
    "/rust_vanilla/frontend/assets/logo-black.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#24272a\\"/><stop offset=\\".42\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#24272a\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#24272a\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#24272a\\"/></svg>",
  ],
  Array [
    "/rust_vanilla/frontend/assets/logo-white.svg",
    "<svg viewBox=\\"0 0 288 288\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><linearGradient id=\\"a\\" gradientUnits=\\"userSpaceOnUse\\" x1=\\"76.81\\" x2=\\"211.16\\" y1=\\"211.17\\" y2=\\"76.81\\"><stop offset=\\".21\\" stop-color=\\"#fff\\"/><stop offset=\\".42\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".59\\" stop-color=\\"#fff\\" stop-opacity=\\"0\\"/><stop offset=\\".81\\" stop-color=\\"#fff\\"/></linearGradient><path d=\\"m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z\\" fill=\\"url(#a)\\"/><path d=\\"m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z\\" fill=\\"#fff\\"/></svg>",
  ],
  Array [
    "/rust_vanilla/frontend/index.html",
    "<!DOCTYPE html>
<html lang=\\"en\\">
<head>
  <meta charset=\\"utf-8\\">
  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
  <link rel=\\"icon\\" href=\\"assets/favicon.ico\\"/>
  <link rel=\\"apple-touch-icon\\" href=\\"assets/favicon.ico\\"/>
  <title>Welcome to NEAR</title>
  <link rel=\\"stylesheet\\" href=\\"assets/global.css\\">
</head>
<body>
<main id=\\"signed-out-flow\\" style=\\"display: none\\">
  <h1>
    The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
  </h1>
  <h3>
    Welcome to NEAR!
  </h3>
  <p>
    Your contract is storing a greeting message in the NEAR blockchain. To
    change it you need to sign in using the NEAR Wallet. It is very simple,
    just use the button below.
  </p>
  <p>
    Do not worry, this app runs in the test network (\\"testnet\\"). It works
    just like the main network (\\"mainnet\\"), but using NEAR Tokens that are
    only for testing!
  </p>
  <p style=\\"text-align: center; margin-top: 2.5em\\">
    <button id=\\"sign-in-button\\">Sign in with NEAR Wallet</button>
  </p>
</main>

<div id=\\"signed-in-flow\\" style=\\"display: none\\">
  <button style=\\"float: right\\" id=\\"sign-out-button\\">
    Sign out <span data-behavior=\\"account-id\\"></span>
  </button>
  <main>
    <h1>
      The contract says: <span class=\\"greeting\\" data-behavior=\\"greeting\\"></span>
    </h1>
    <form class=\\"change\\">
      <label for=\\"greeting\\">Change greeting:</label>
      <div>
        <input
          autocomplete=\\"off\\"
          id=\\"greeting\\"
          data-behavior=\\"greeting\\"
        />
        <button>Save</button>
      </div>
    </form>
    <p>
      Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
    </p>
    <ol>
      <li>
        Look in <code>index.js</code> and <code>near-api.js</code> – you'll see <code>get_greeting</code>
        and <code>set_greeting</code> being called on <code>contract</code>.
        What's this?
      </li>
      <li>
        Ultimately, this <code>contract</code> code is defined in
        <code>assembly/index.ts</code> – this is the source code for your
        <a target=\\"_blank\\" href=\\"https://docs.near.org/docs/develop/contracts/overview\\">smart contract</a>.
      </li>
      <li>
        When you run <code>yarn dev</code>, the code in
        <code>assembly/index.ts</code> gets deployed to the NEAR testnet. You
        can see how this happens by looking in <code>package.json</code> at the
        <code>scripts</code> section to find the <code>dev</code> command.
      </li>
    </ol>
    <hr>
    <p>
      To keep learning, check out
      <a target=\\"_blank\\" href=\\"https://docs.near.org\\">the NEAR docs</a>
      or look through some
      <a target=\\"_blank\\" href=\\"https://examples.near.org\\">example apps</a>.
    </p>
  </main>
</div>

<script src=\\"index.js\\" type=\\"module\\"></script>
</body>
</html>
",
  ],
  Array [
    "/rust_vanilla/frontend/index.js",
    "import 'regenerator-runtime/runtime';
import {
  initContract,
  signInWithNearWallet,
  signOutNearWallet,
  setGreetingOnContract,
  getGreetingFromContract,
} from './near-api';

document.querySelector('form').onsubmit = doUserAction;
document.querySelector('#sign-in-button').onclick = signInWithNearWallet;
document.querySelector('#sign-out-button').onclick = signOutNearWallet;

// ====== Initialize the API for NEAR ======
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) {
      signedInFlow();
    } else {
      signedOutFlow();
    }
  })
  .catch(alert);

// Take the new greeting and send it to the contract
async function doUserAction(event) {
  event.preventDefault();
  const { greeting } = event.target.elements;
  document
    .querySelector('#signed-in-flow main')
    .classList.add('please-wait');
  try {
    // ===== Call smart-contract to save the value on then blockchain =====
    await setGreetingOnContract(greeting.value);
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    );
    throw e;
  }

  // ===== Fetch the data from the blockchain =====
  await fetchGreeting();
  document
    .querySelector('#signed-in-flow main')
    .classList.remove('please-wait');
}

// Get greeting from the contract on chain
async function fetchGreeting() {
  const currentGreeting = await getGreetingFromContract();

  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    el.innerText = currentGreeting;
    el.value = currentGreeting;
  });
}

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-in-flow').style.display = 'none';
  document.querySelector('#signed-out-flow').style.display = 'block';

  fetchGreeting();
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-out-flow').style.display = 'none';
  document.querySelector('#signed-in-flow').style.display = 'block';
  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId;
  });

  fetchGreeting();
}
",
  ],
  Array [
    "/rust_vanilla/frontend/near-api.js",
    "import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import getConfig from './near-config';

const nearConfig = getConfig(process.env.NODE_ENV || 'development');

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  });
}

export function signOutNearWallet() {
  window.walletConnection.signOut();
  // reload page
  window.location.replace(window.location.origin + window.location.pathname);
}

export function signInWithNearWallet() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

export async function setGreetingOnContract(message){
  let response = await window.contract.set_greeting({
    args:{message: message}
  });
  return response;
}

export async function getGreetingFromContract(){
  let greeting = await window.contract.get_greeting();
  return greeting;
}",
  ],
  Array [
    "/rust_vanilla/frontend/near-config.js",
    "const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project';

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    };
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    };
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: \`\${process.env.HOME}/.near/validator_key.json\`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    };
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    };
  default:
    throw Error(\`Unconfigured environment '\${env}'. Can be configured in src/config.js.\`);
  }
}

module.exports = getConfig;
",
  ],
  Array [
    "/rust_vanilla/integration-tests/ava.config.cjs",
    "require(\\"util\\").inspect.defaultOptions.depth = 5; // Increase AVA's printing depth

module.exports = {
  timeout: \\"300000\\",
  files: [\\"src/*.ava.ts\\"],
  failWithoutAssertions: false,
  extensions: [\\"ts\\"],
  require: [\\"ts-node/register\\"],
};
",
  ],
  Array [
    "/rust_vanilla/integration-tests/package.json",
    "{
  \\"name\\": \\"ava-testing\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"test\\": \\"ava --verbose\\"
  },
  \\"devDependencies\\": {
    \\"ava\\": \\"4.2.0\\",
    \\"near-api-js\\": \\"0.44.2\\",
    \\"typescript\\": \\"4.7.2\\",
    \\"ts-node\\": \\"10.8.0\\",
    \\"@types/bn.js\\": \\"5.1.0\\"
  },
  \\"dependencies\\": {}
}
",
  ],
  Array [
    "/rust_vanilla/integration-tests/src/config.ts",
    "import {KeyPair, keyStores} from 'near-api-js';

const fs = require('fs');

const CONTRACT_NAME = fs.readFileSync('../contract/neardev/dev-account', 'utf-8');
const NETWORK_ID = 'testnet';

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore();

// Load credentials
const credPath = \`\${process.env.HOME}/.near-credentials/\${NETWORK_ID}/\${CONTRACT_NAME}.json\`;
let credentials = JSON.parse(fs.readFileSync(credPath));

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
);

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
};",
  ],
  Array [
    "/rust_vanilla/integration-tests/src/main.ava.ts",
    "import anyTest, { TestFn } from 'ava';

import { Near, Account, Contract } from 'near-api-js';
import { nearConfig } from './config';

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>;

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig);
  const user = await new Account(near.connection, nearConfig.contractName);
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  );
  t.context.accounts = { contract };
});

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts;
  const message: string = await contract.get_greeting({});
  t.is(message, 'Hello');
});

test('changes the message', async (t) => {
  const { contract } = t.context.accounts;
  await contract.set_greeting({args:{ message: 'Howdy' }});
  const message: string = await contract.get_greeting({});
  t.is(message, 'Howdy');
});",
  ],
  Array [
    "/rust_vanilla/package.json",
    "{
  \\"name\\": \\"rust_vanilla\\",
  \\"version\\": \\"1.0.0\\",
  \\"license\\": \\"(MIT AND Apache-2.0)\\",
  \\"scripts\\": {
    \\"start\\": \\"echo The app is starting! && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open\\",
    \\"deploy\\": \\"npm run build:contract && rm -rf neardev && near dev-deploy --wasmFile ./contract/target/wasm32-unknown-unknown/release/greeter.wasm && export $(cat ./neardev/dev-account.env) && near call $CONTRACT_NAME init --accountId $CONTRACT_NAME --deposit 1 && echo $CONTRACT_NAME\\",
    \\"build\\": \\"npm run build:contract && npm run build:web\\",
    \\"build:web\\": \\"parcel build frontend/index.html --public-url ./\\",
    \\"build:contract\\": \\"cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release\\",
    \\"test\\": \\"npm run test:contract && npm run test:integration\\",
    \\"test:unit\\": \\"cd contract && cargo test\\",
    \\"test:integration\\": \\"cd integration-tests/workspaces-rs-tests && cargo run --example integration-tests\\"
  },
  \\"devDependencies\\": {
    \\"near-cli\\": \\"^3.3.0\\",
    \\"nodemon\\": \\"~2.0.16\\",
    \\"ava\\": \\"^4.2.0\\",
    \\"parcel\\": \\"^2.6.0\\",
    \\"process\\": \\"^0.11.10\\",
    \\"env-cmd\\": \\"^10.1.0\\"
  },
  \\"dependencies\\": {
    \\"near-api-js\\": \\"^0.44.2\\"
  }
}",
  ],
]
`;
